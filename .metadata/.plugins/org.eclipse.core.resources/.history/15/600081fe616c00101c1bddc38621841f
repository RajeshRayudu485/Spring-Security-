package com.admin.demo.controller;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.admin.demo.model.Admin;
import com.admin.demo.service.AdminService;

@RestController
@RequestMapping("/admin")
public class AdminController {

	private static final Logger logger = LoggerFactory.getLogger(AdminController.class);

	@Autowired
	private AdminService adminService;

	// Inside AdminController

	@PostMapping("/register")
	public ResponseEntity<?> registerAdmin(@RequestBody Admin admin) {
		logger.info("Registration request received for email: {}", admin.getEmail());

		if (adminService.emailExists(admin.getEmail())) {
			logger.warn("Registration failed: Email already registered: {}", admin.getEmail());
			return ResponseEntity.badRequest().body("Email already registered");
		}

		Admin savedAdmin = adminService.registerAdmin(admin);

		logger.info("Admin registered successfully with id: {}", savedAdmin.getAdminId());
		return ResponseEntity.ok("Admin registered successfully with id: " + savedAdmin.getAdminId());
	}

	@PostMapping("/login")
	public ResponseEntity<ValidationResponse> loginAdmin(@RequestBody AuthRequest authRequest) {
		logger.info("Login attempt for admin email: {}", authRequest.getUsername());

		Optional<Admin> adminOpt = adminService.findByEmail(authRequest.getUsername());

		if (adminOpt.isEmpty()) {
			logger.warn("Login failed: Admin not found with email: {}", authRequest.getUsername());
			return ResponseEntity.ok(new ValidationResponse(false, null));
		}

		Admin admin = adminOpt.get();

		if (!adminService.checkPassword(admin, authRequest.getPassword())) {
			logger.warn("Login failed: Invalid password for email: {}", authRequest.getUsername());
			return ResponseEntity.ok(new ValidationResponse(false, null));
		}

		UserResponse userResponse = new UserResponse(admin.getAdminId(), admin.getEmail(), "ADMIN");

		logger.info("Login successful for admin email: {}", authRequest.getUsername());
		return ResponseEntity.ok(new ValidationResponse(true, userResponse));
	}

	@GetMapping("/profile/{email}")
	public ResponseEntity<?> getProfile(@PathVariable String email) {
		logger.info("Profile request received for admin email: {}", email);

		Optional<Admin> adminOpt = adminService.findByEmail(email);

		if (adminOpt.isEmpty()) {
			logger.warn("Profile not found for admin email: {}", email);
			return ResponseEntity.notFound().build();
		}

		Admin admin = adminOpt.get();

		logger.info("Returning profile for admin email: {}", email);
		admin.setPassword(null); // exclude password for security

		return ResponseEntity.ok(admin);
	}

}
