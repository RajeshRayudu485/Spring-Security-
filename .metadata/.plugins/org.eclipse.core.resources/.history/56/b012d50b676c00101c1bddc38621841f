package com.client.user;

import com.client.dto.AuthRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;

import javax.security.auth.login.LoginException;

@RestController
@RequestMapping("/client")
@RequiredArgsConstructor
@Slf4j
public class ClinetLoginController {

    private static final String API_GATEWAY_SERVICE_NAME = "API-GATEWAY";
    private final WebClient.Builder webClientBuilder;
    private final ObjectMapper objectMapper;

    @PostMapping("/login/user")
    public Mono<ResponseEntity<String>> loginUser(@RequestBody AuthRequest request) {
        log.info("üîê Attempting user login for email: {}", request.getUsername());
        return forwardLogin(request, "/auth/login/user");
    }
    
    @PostMapping("/login/admin")
    public Mono<ResponseEntity<String>> loginAdmin(@RequestBody AuthRequest request) {
        log.info("üîê Attempting user login for email: {}", request.getUsername());
        return forwardLogin(request, "/auth/login/user");
    }
    


    private <T> Mono<ResponseEntity<String>> forwardLogin(T request, String path) {
        String uri = "lb://" + API_GATEWAY_SERVICE_NAME + path;

        return webClientBuilder.build()
                .post()
                .uri(uri)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(request)
                .exchangeToMono(response -> {
                    List<String> cookieHeaders = response.headers().header(HttpHeaders.SET_COOKIE);
                    Mono<String> bodyMono = response.bodyToMono(String.class);

                    return bodyMono.map(body -> {
                        log.info(" Login success via {} with response status: {}", path, response.statusCode());
                        ResponseEntity.BodyBuilder builder = ResponseEntity.status(response.statusCode());

                        for (String cookie : cookieHeaders) {
                            builder.header(HttpHeaders.SET_COOKIE, cookie);
                        }

                        return builder.body(body);
                    });
                })
                .doOnError(e -> log.error(" Login failed for path {}: {}", path, e.getMessage()))
                .onErrorMap(e -> new LoginException("Login request to " + path + " failed: " + e.getMessage()));
    }
}